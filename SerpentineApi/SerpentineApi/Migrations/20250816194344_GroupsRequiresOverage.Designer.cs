// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SerpentineApi.DataAccess.Context;

#nullable disable

namespace SerpentineApi.Migrations
{
    [DbContext(typeof(SerpentineDbContext))]
    [Migration("20250816194344_GroupsRequiresOverage")]
    partial class GroupsRequiresOverage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.Channel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AdultContent")
                        .HasColumnType("bit");

                    b.Property<string>("BannerPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.ChannelBan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ChannelId", "UserId")
                        .IsUnique();

                    b.ToTable("ChannelBans");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.ChannelMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSilenced")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ChannelId", "UserId")
                        .IsUnique();

                    b.ToTable("ChannelMembers");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresOverage")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId", "Name")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.GroupAccess", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "UserId")
                        .IsUnique();

                    b.ToTable("GroupAccesses");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsNotification")
                        .HasColumnType("bit");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "01K1Y24KEJ2SQ283X365D8QBJP",
                            AccessLevel = 0,
                            CreatedAt = new DateTime(2025, 8, 16, 19, 43, 41, 761, DateTimeKind.Utc).AddTicks(3160),
                            Name = "User",
                            UpdatedAt = new DateTime(2025, 8, 16, 19, 43, 41, 761, DateTimeKind.Utc).AddTicks(3165)
                        },
                        new
                        {
                            Id = "01K1Y24KEPDA7ZFCX6YCP3MY7M",
                            AccessLevel = 1,
                            CreatedAt = new DateTime(2025, 8, 16, 19, 43, 41, 765, DateTimeKind.Utc).AddTicks(3931),
                            Name = "Admin",
                            UpdatedAt = new DateTime(2025, 8, 16, 19, 43, 41, 765, DateTimeKind.Utc).AddTicks(3933)
                        },
                        new
                        {
                            Id = "01K1Y24KEPTCVKR97AKSWKHTP8",
                            AccessLevel = 2,
                            CreatedAt = new DateTime(2025, 8, 16, 19, 43, 41, 765, DateTimeKind.Utc).AddTicks(3955),
                            Name = "Tester",
                            UpdatedAt = new DateTime(2025, 8, 16, 19, 43, 41, 765, DateTimeKind.Utc).AddTicks(3956)
                        },
                        new
                        {
                            Id = "01K1Y24KEP473CNR8N01ZCXRV9",
                            AccessLevel = 3,
                            CreatedAt = new DateTime(2025, 8, 16, 19, 43, 41, 765, DateTimeKind.Utc).AddTicks(3966),
                            Name = "Developer",
                            UpdatedAt = new DateTime(2025, 8, 16, 19, 43, 41, 765, DateTimeKind.Utc).AddTicks(3966)
                        });
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DayOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.ChannelBan", b =>
                {
                    b.HasOne("SerpentineApi.DataAccess.Models.Channel", "Channel")
                        .WithMany("Bans")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SerpentineApi.DataAccess.Models.User", "User")
                        .WithMany("Bans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.ChannelMember", b =>
                {
                    b.HasOne("SerpentineApi.DataAccess.Models.Channel", "Channel")
                        .WithMany("Members")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SerpentineApi.DataAccess.Models.User", "User")
                        .WithMany("MyChannels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.Group", b =>
                {
                    b.HasOne("SerpentineApi.DataAccess.Models.Channel", "Channel")
                        .WithMany("Groups")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.GroupAccess", b =>
                {
                    b.HasOne("SerpentineApi.DataAccess.Models.Group", "Group")
                        .WithMany("Accesses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SerpentineApi.DataAccess.Models.User", "User")
                        .WithMany("MyAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.Message", b =>
                {
                    b.HasOne("SerpentineApi.DataAccess.Models.Group", "Group")
                        .WithMany("Messages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SerpentineApi.DataAccess.Models.Message", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SerpentineApi.DataAccess.Models.User", "Sender")
                        .WithMany("MyMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Group");

                    b.Navigation("Parent");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.User", b =>
                {
                    b.HasOne("SerpentineApi.DataAccess.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.Channel", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("Groups");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.Group", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.Message", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SerpentineApi.DataAccess.Models.User", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("MyAccesses");

                    b.Navigation("MyChannels");

                    b.Navigation("MyMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
